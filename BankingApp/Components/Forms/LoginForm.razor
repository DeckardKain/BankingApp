@inject IUserInteraction userInteraction
@inject IObserver observer
@inject IUIService UIService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title">Login</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="@userLogin" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="username">Username:</label>
                            <InputText class="form-control" @bind-Value="@userLogin.Username" id="username" />
                            <ValidationMessage For="@(() => userLogin.Username)" />
                        </div>
                        <div class="form-group">
                            <label for="password">Password:</label>
                            <InputText type="password" class="form-control" @bind-Value="@userLogin.Password" id="password" />
                            <ValidationMessage For="@(() => userLogin.Password)" />
                        </div>
                        <div class="status-box @statusClass">
                            <LoadingAnimation IsLoading=@IsLoading />
                            @statusMessage
                        </div>
                        <button type="submit" class="btn btn-primary">Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Action? onLogin { get; set; }

    private UserLoginDTO userLogin = new UserLoginDTO();

    private string? statusClass { get; set; }
    private string? statusMessage { get; set; }

    private bool IsLoading { get; set; }

    protected override void OnInitialized()
    {
        // Subscribe to events        
        UIService.OnUpdateUI += StateHasChanged;

    }

    private async void HandleValidSubmit()
    {
        IsLoading = true;
        var state = new StateChangeDTO();

        var result = await userInteraction.Authenticate(userLogin);

        if (result)
        {
            // Update CSS Style
            statusClass = "success";
            // Log Msg to UI
            statusMessage = "Login Success!";
            // Log Msg to Console
            state.Message = "GUI: User " + userLogin.Username + " successfully authenticated.";
            IsLoading = false;
        }
        else
        {
            // Update CSS Style
            statusClass = "failure";
            // Log Msg to UI
            statusMessage = "Login Failed!";
            // Log Msg to Console
            state.Message = "GUI: User " + userLogin.Username + " your access is denied.";
            IsLoading = false;
        }        

        // Invokes a method in the parent component to demonstrate parent child communication.
        onLogin?.Invoke();

        // Observer pattern demonstration for console logging only.
        observer.Notify(state);

        // Invoke global UI Refresh 
        UIService.UpdateUI();

    }

}
