@inject IDataService dataService
@inject IUIService UIService

<h3>Create Transaction</h3>

<EditForm Model="@transaction" OnValidSubmit="CreateTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="transactionType">Transaction Type:</label>
        <InputSelect id="transactionType" class="form-control" @bind-Value="transaction.TransactionType">
            @foreach (TransactionType type in Enum.GetValues(typeof(TransactionType)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => transaction.TransactionType)" />
    </div>

    <div class="form-group">
        <label for="merchantInfo">Merchant Info:</label>
        <InputText id="merchantInfo" class="form-control" @bind-Value="transaction.MerchantInfo" />
    </div>

    <div class="form-group">
        <label for="dateTime">Date and Time:</label>
        <InputDate id="dateTime" class="form-control" @bind-Value="transaction.DateTime" />
        <ValidationMessage For="@(() => transaction.DateTime)" />
    </div>

    <div class="form-group">
        <label for="amount">Amount:</label>
        <InputNumber id="amount" class="form-control" @bind-Value="transaction.Amount" />
        <ValidationMessage For="@(() => transaction.Amount)" />
    </div>

    <button type="submit" class="btn btn-primary">Create Transaction</button>
</EditForm>

@code {
    private TransactionDTO transaction = new TransactionDTO();

    [Parameter]
    public string? CustomerId { get; set; }
    [Parameter]
    public string? AccountId { get; set; }

    private bool IsSuccess { get; set; } = false;

    protected override void OnInitialized()
    {
        transaction.CustomerId = CustomerId;
        transaction.AccountId = AccountId;
        transaction.DateTime = DateTime.Now;
        UIService.OnUpdateUI += StateHasChanged;
    }

    private async Task CreateTransaction()
    {
        var result = await dataService.CreateNewTransaction(transaction);
        UIService.UpdateUI();
    }
}
