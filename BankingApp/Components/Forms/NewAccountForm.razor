@using System.Reflection.Metadata
@inject IDataService dataService
@inject IUserInteraction userInteraction
@inject IUIService UIService


<EditForm Model="@newAccount" OnValidSubmit="CreateAccount">
    <div class="form-group">
        <label for="accountType">Account Type:</label>
        <select class="form-control" id="accountType" @bind="@newAccount.AccountType">
            <option value="Chequing">Chequing</option>
            <option value="Savings">Savings</option>
            <option value="Retirement">Retirement</option>
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Create Account</button>
</EditForm>

@code {
    private AccountDTO newAccount = new AccountDTO();

    public bool IsAccountCreated { get; set; }
    [Parameter]
    public EventCallback OnAccountCreated { get; set; }

    private string fadeClass = ""; // Css class to control fade animation for alert


    protected override void OnInitialized()
    {
        // Subscribe to events
        UIService.OnUpdateUI += StateHasChanged;
    }

    private async Task CreateAccount()
    {
        IsAccountCreated = false;
        var customerId = await GetCustomerId();
        newAccount.CustomerId = customerId;
        var result = await userInteraction.CreateNewAccount(newAccount);
        if(result != null)
        {
            IsAccountCreated = true;
            fadeClass = "fade-out";
            await Task.Delay(1000);
            fadeClass = "fade-out hidden";
        }
        await OnAccountCreated.InvokeAsync();
        UIService.UpdateUI();


    }

    private async Task<string> GetCustomerId()
    {
        var userId = userInteraction.UserId;
        var customerId = await dataService.GetCustomerId(userId);
        return customerId;
    }
}