@inject IDataService dataService
@inject IUserInteraction userService
@inject IUIService UIService


@if (Transactions != null && Transactions.Any())
{
    <h3>Transactions for Account: @AccountNumber</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Description</th>
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Transactions)
            {
                <tr>
                    <td>@transaction.DateTime.ToShortDateString()</td>
                    <td>@transaction.MerchantInfo</td>
                    <td>@transaction.Amount.Value.ToString("C")</td>
                </tr>
            }
        </tbody>
    </table>
    <NewTransactionForm AccountId=@AccountNumber CustomerId=@CustomerId />
}
else
{
    <p>No transactions available for this account.</p>
    <NewTransactionForm AccountId=@AccountNumber CustomerId=@CustomerId />
}



@code {
    [Parameter]
    public string AccountNumber { get; set; }
    [Parameter]
    public string CustomerId { get; set; }

    [Parameter]
    public bool OnAccountSelected { get; set; }

    public List<TransactionDTO> Transactions { get; set; } = new List<TransactionDTO>();

    protected override async Task OnInitializedAsync()
    {
        UIService.OnUpdateUI += StateHasChanged;        
        await GetAccountTransactions();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (OnAccountSelected)
        {
            await GetAccountTransactions();           
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (OnAccountSelected)
        {
            await GetAccountTransactions();
        }
    }

    private async Task GetAccountTransactions()
    {
        Transactions.Clear();
        Transactions = await dataService.GetAllTransactionsByAccountId(AccountNumber);
        UIService.UpdateUI();
    }

 

}