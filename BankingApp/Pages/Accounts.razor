@page "/accounts"

@inject IUIService UIService
@inject IDataService dataService
@inject IUserInteraction userService

<NewAccountForm OnAccountCreated="UpdateAccounts" />

@if(AccountDTOs != null && AccountDTOs.Count > 0)
{
    

<table class="table table-striped">
    <thead>
        <tr>
            <th>Account Type</th>
            <th>Balance</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var account in AccountDTOs)
        {
            <tr>
                    <td><button class="link-button" @onclick="(()=> SelectAccount(account.Id))">@account.AccountType </button></td>
                <td>@account.Balance</td>
            </tr>
        }
    </tbody>
</table>
}

@if (!string.IsNullOrEmpty(AccountNumber) && NewAccountSelected)
{
    <Account AccountNumber=@AccountNumber CustomerId=@CustomerId OnAccountSelected="NewAccountSelected" />
}


@code {
    public List<AccountDTO> AccountDTOs { get; set; } = new List<AccountDTO>();

    public string AccountNumber { get; set; }
    public string CustomerId { get; set; }

    private string UserId { get; set; }

    public bool NewAccountSelected { get; set; } = false;

    protected override void OnInitialized()
    {
        UIService.OnUpdateUI += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        UIService.OnUpdateUI += StateHasChanged;
        UserId = userService.UserId;
        await UpdateAccounts();
        CustomerId = await dataService.GetCustomerId(UserId);
    }

    private async Task UpdateAccounts()
    {        
        if (UserId != null)
        {
            AccountDTOs = await dataService.GetAllAccountsByUserId(UserId);
        }
    }

    private async Task SelectAccount(string accountId)
    {
        AccountNumber = accountId;
        await UpdateAccounts();
        NewAccountSelected = true;
        StateHasChanged();
    }

}